1.高级特性
    (1)切片：取list或tuple的部分元素
        ①L[n:m]：取第n+1个元素至m-1个元素。
        ②L[:]：前空表示首个，后空表示末尾。相当于复制一个list。
        ③L[::m]：首个至末尾，每隔m个元素取一个。
        ④L[-10:]：取最后10个元素。包含-10和-1。
        ⑤也适用于字符串切片。
        ⑥用循环需要这样取：
             >>> r = []
             >>> n = 3
             >>> for i in range(n):
             >>>    r.append(L[i])
    (2)迭代
        ①dict
            for key in dict:
            for key in dict.values():
            for k,v in dict.items():
        ②判断一个对象是否可迭代
            isinstance(object, Iterable)
        ③对list实现索引获取
            >>> for i, value in enumerate(['A', 'B', 'C']):
            >>>    print(i, value)
    (3)列表生成式：前面可进行表达式运算等。
        ①list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] <= list(range(1, 11))
        ②[1x1, 2x2, 3x3, ..., 10x10]
            a：
                >>> L = []
                >>> for x in range(1, 11):
                >>>    L.append(x * x)
            b：
                 四则运算：[x * x for x in range(1, 11)] => [1x1, 2x2, 3x3, ..., 10x10]
                 加if判断：[x * x for x in range(1, 11) if x % 2 == 0] => [4, 16, 36, 64, 100]
                 加双循环：[m + n for m in 'ABC' for n in 'XYZ'] => ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
    (4)生成器generator
        ①列表生成式的[]改成()，就创建了一个generator。
        ②next()获得generator的下一个返回值，没有元素时会抛出StopIteration的错误；不过一般使用for循环，不抛错误。
        ③带yield的generator function，generator在执行过程中，遇到yield就中断，下次又继续执行。
        ④返回值包含在StopIteration的value中。
    (5)迭代器
        ①生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。
        ② 把list、dict、str等Iterable变成Iterator可以使用iter(object)函数。
        ③凡是可作用于for循环的对象都是Iterable类型。
        ④凡是可作用于next()函数的对象都是Iterator类型。
        ⑤Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，
           直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，
           只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。